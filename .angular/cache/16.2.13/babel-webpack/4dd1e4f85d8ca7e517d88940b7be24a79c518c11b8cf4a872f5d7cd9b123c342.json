{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ObservableComponent {\n  constructor() {\n    this.observableDemo(); // 在建構子中調用函式\n    this.observableAsyncDemo(); // 在建構子中調用函式\n  }\n  observableDemo() {\n    const source$ = new Observable(subscriber => {\n      console.log('stream 開始');\n      subscriber.next(1);\n      subscriber.next(2);\n      subscriber.next(3);\n      subscriber.next(4);\n      console.log('stream 結束');\n      subscriber.complete();\n    });\n    // 每次訂閱都是一次新的 stream\n    source$.subscribe({\n      next: data => console.log(`Observable 第一次訂閱: ${data}`),\n      complete: () => console.log('第一次訂閱完成')\n    });\n    source$.subscribe({\n      next: data => console.log(`Observable 第二次訂閱: ${data}`),\n      complete: () => console.log('第二次訂閱完成')\n    });\n  }\n  // Observable with async\n  observableAsyncDemo() {\n    const source$ = new Observable(subscriber => {\n      console.log('stream 開始');\n      subscriber.next(1);\n      subscriber.next(2);\n      subscriber.next(3);\n      setTimeout(() => {\n        subscriber.next(4);\n        subscriber.complete();\n        console.log('stream 結束');\n      });\n    });\n    // 每次訂閱都是一次新的 stream\n    source$.subscribe({\n      next: data => console.log(`Observable 第一次訂閱: ${data}`),\n      complete: () => console.log('第一次訂閱完成')\n    });\n    source$.subscribe({\n      next: data => console.log(`Observable 第二次訂閱: ${data}`),\n      complete: () => console.log('第二次訂閱完成')\n    });\n  }\n  static #_ = this.ɵfac = function ObservableComponent_Factory(t) {\n    return new (t || ObservableComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ObservableComponent,\n    selectors: [[\"app-observable\"]],\n    decls: 2,\n    vars: 0,\n    template: function ObservableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"observable works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n}","map":{"version":3,"names":["Observable","ObservableComponent","constructor","observableDemo","observableAsyncDemo","source$","subscriber","console","log","next","complete","subscribe","data","setTimeout","_","_2","selectors","decls","vars","template","ObservableComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["D:\\Demo\\src\\app\\observable\\observable.component.ts","D:\\Demo\\src\\app\\observable\\observable.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-observable',\n  templateUrl: './observable.component.html',\n  styles: []\n})\nexport class ObservableComponent {\n\n  constructor() {\n    this.observableDemo(); // 在建構子中調用函式\n    this.observableAsyncDemo(); // 在建構子中調用函式\n  }\n\n  observableDemo() {\n    const source$ = new Observable(subscriber => {\n      console.log('stream 開始');\n      subscriber.next(1);\n      subscriber.next(2);\n      subscriber.next(3);\n      subscriber.next(4);\n      console.log('stream 結束');\n      subscriber.complete();\n    });\n\n    // 每次訂閱都是一次新的 stream\n    source$.subscribe({\n      next: data => console.log(`Observable 第一次訂閱: ${data}`),\n      complete: () => console.log('第一次訂閱完成')\n    });\n    source$.subscribe({\n      next: data => console.log(`Observable 第二次訂閱: ${data}`),\n      complete: () => console.log('第二次訂閱完成')\n    });\n  }\n\n  // Observable with async\n  observableAsyncDemo() {\n    const source$ = new Observable(subscriber => {\n      console.log('stream 開始');\n      subscriber.next(1);\n      subscriber.next(2);\n      subscriber.next(3);\n      setTimeout(() => {\n        subscriber.next(4);\n        subscriber.complete();\n        console.log('stream 結束');\n      });\n    });\n\n    // 每次訂閱都是一次新的 stream\n    source$.subscribe({\n      next: data => console.log(`Observable 第一次訂閱: ${data}`),\n      complete: () => console.log('第一次訂閱完成')\n    });\n    source$.subscribe({\n      next: data => console.log(`Observable 第二次訂閱: ${data}`),\n      complete: () => console.log('第二次訂閱完成')\n    });\n  };\n\n}\n","<p>observable works!</p>\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,MAAM;;AAOjC,OAAM,MAAOC,mBAAmB;EAE9BC,YAAA;IACE,IAAI,CAACC,cAAc,EAAE,CAAC,CAAC;IACvB,IAAI,CAACC,mBAAmB,EAAE,CAAC,CAAC;EAC9B;EAEAD,cAAcA,CAAA;IACZ,MAAME,OAAO,GAAG,IAAIL,UAAU,CAACM,UAAU,IAAG;MAC1CC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxBF,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;MAClBH,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;MAClBH,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;MAClBH,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;MAClBF,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxBF,UAAU,CAACI,QAAQ,EAAE;IACvB,CAAC,CAAC;IAEF;IACAL,OAAO,CAACM,SAAS,CAAC;MAChBF,IAAI,EAAEG,IAAI,IAAIL,OAAO,CAACC,GAAG,CAAC,qBAAqBI,IAAI,EAAE,CAAC;MACtDF,QAAQ,EAAEA,CAAA,KAAMH,OAAO,CAACC,GAAG,CAAC,SAAS;KACtC,CAAC;IACFH,OAAO,CAACM,SAAS,CAAC;MAChBF,IAAI,EAAEG,IAAI,IAAIL,OAAO,CAACC,GAAG,CAAC,qBAAqBI,IAAI,EAAE,CAAC;MACtDF,QAAQ,EAAEA,CAAA,KAAMH,OAAO,CAACC,GAAG,CAAC,SAAS;KACtC,CAAC;EACJ;EAEA;EACAJ,mBAAmBA,CAAA;IACjB,MAAMC,OAAO,GAAG,IAAIL,UAAU,CAACM,UAAU,IAAG;MAC1CC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxBF,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;MAClBH,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;MAClBH,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;MAClBI,UAAU,CAAC,MAAK;QACdP,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;QAClBH,UAAU,CAACI,QAAQ,EAAE;QACrBH,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MAC1B,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;IACAH,OAAO,CAACM,SAAS,CAAC;MAChBF,IAAI,EAAEG,IAAI,IAAIL,OAAO,CAACC,GAAG,CAAC,qBAAqBI,IAAI,EAAE,CAAC;MACtDF,QAAQ,EAAEA,CAAA,KAAMH,OAAO,CAACC,GAAG,CAAC,SAAS;KACtC,CAAC;IACFH,OAAO,CAACM,SAAS,CAAC;MAChBF,IAAI,EAAEG,IAAI,IAAIL,OAAO,CAACC,GAAG,CAAC,qBAAqBI,IAAI,EAAE,CAAC;MACtDF,QAAQ,EAAEA,CAAA,KAAMH,OAAO,CAACC,GAAG,CAAC,SAAS;KACtC,CAAC;EACJ;EAAC,QAAAM,CAAA,G;qBApDUb,mBAAmB;EAAA;EAAA,QAAAc,EAAA,G;UAAnBd,mBAAmB;IAAAe,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCRhCE,EAAA,CAAAC,cAAA,QAAG;QAAAD,EAAA,CAAAE,MAAA,wBAAiB;QAAAF,EAAA,CAAAG,YAAA,EAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}