{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ObservableComponent {\n  constructor() {\n    this.observableDemo = () => {\n      const source$ = new Observable(subscriber => {\n        console.log('stream 開始');\n        subscriber.next(1);\n        subscriber.next(2);\n        subscriber.next(3);\n        subscriber.next(4);\n        console.log('stream 結束');\n        subscriber.complete();\n      });\n      // 每次訂閱都是一次新的 stream\n      source$.subscribe({\n        next: data => console.log(`Observable 第一次訂閱: ${data}`),\n        complete: () => console.log('第一次訂閱完成')\n      });\n      source$.subscribe({\n        next: data => console.log(`Observable 第二次訂閱: ${data}`),\n        complete: () => console.log('第二次訂閱完成')\n      });\n    };\n  }\n  static #_ = this.ɵfac = function ObservableComponent_Factory(t) {\n    return new (t || ObservableComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ObservableComponent,\n    selectors: [[\"app-observable\"]],\n    decls: 2,\n    vars: 0,\n    template: function ObservableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"observable works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n}","map":{"version":3,"names":["ObservableComponent","constructor","observableDemo","source$","Observable","subscriber","console","log","next","complete","subscribe","data","_","_2","selectors","decls","vars","template","ObservableComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["D:\\Demo\\src\\app\\observable\\observable.component.ts","D:\\Demo\\src\\app\\observable\\observable.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-observable',\n  templateUrl: './observable.component.html',\n  styles: [\n  ]\n})\nexport class ObservableComponent {\n  const observableDemo = () => {\n    const source$ = new Observable(subscriber => {\n      console.log('stream 開始');\n      subscriber.next(1);\n      subscriber.next(2);\n      subscriber.next(3);\n      subscriber.next(4);\n      console.log('stream 結束');\n      subscriber.complete();\n    });\n  \n    // 每次訂閱都是一次新的 stream\n    source$.subscribe({\n      next: data => console.log(`Observable 第一次訂閱: ${data}`),\n      complete: () => console.log('第一次訂閱完成')\n    });\n    source$.subscribe({\n      next: data => console.log(`Observable 第二次訂閱: ${data}`),\n      complete: () => console.log('第二次訂閱完成')\n    });\n  };\n  \n  console.log('練習使用 new Observable');\n  observableDemo();\n}\n","<p>observable works!</p>\n"],"mappings":";AAQA,OAAM,MAAOA,mBAAmB;EANhCC,YAAA;IAOQ,KAAAC,cAAc,GAAG,MAAK;MAC1B,MAAMC,OAAO,GAAG,IAAIC,UAAU,CAACC,UAAU,IAAG;QAC1CC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;QACxBF,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;QAClBH,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;QAClBH,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;QAClBH,UAAU,CAACG,IAAI,CAAC,CAAC,CAAC;QAClBF,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;QACxBF,UAAU,CAACI,QAAQ,EAAE;MACvB,CAAC,CAAC;MAEF;MACAN,OAAO,CAACO,SAAS,CAAC;QAChBF,IAAI,EAAEG,IAAI,IAAIL,OAAO,CAACC,GAAG,CAAC,qBAAqBI,IAAI,EAAE,CAAC;QACtDF,QAAQ,EAAEA,CAAA,KAAMH,OAAO,CAACC,GAAG,CAAC,SAAS;OACtC,CAAC;MACFJ,OAAO,CAACO,SAAS,CAAC;QAChBF,IAAI,EAAEG,IAAI,IAAIL,OAAO,CAACC,GAAG,CAAC,qBAAqBI,IAAI,EAAE,CAAC;QACtDF,QAAQ,EAAEA,CAAA,KAAMH,OAAO,CAACC,GAAG,CAAC,SAAS;OACtC,CAAC;IACJ,CAAC;;EAIF,QAAAK,CAAA,G;qBAzBYZ,mBAAmB;EAAA;EAAA,QAAAa,EAAA,G;UAAnBb,mBAAmB;IAAAc,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCRhCE,EAAA,CAAAC,cAAA,QAAG;QAAAD,EAAA,CAAAE,MAAA,wBAAiB;QAAAF,EAAA,CAAAG,YAAA,EAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}